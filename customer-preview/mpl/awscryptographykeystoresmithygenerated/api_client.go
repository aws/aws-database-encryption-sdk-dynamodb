// Code generated by smithy-go-codegen DO NOT EDIT.

package awscryptographykeystoresmithygenerated

import (
	"context"

	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/mpl/AwsCryptographyKeyStoreTypes"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/mpl/KeyStore"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/mpl/awscryptographykeystoresmithygeneratedtypes"
)

type Client struct {
	DafnyClient AwsCryptographyKeyStoreTypes.IKeyStoreClient
}

func NewClient(clientConfig awscryptographykeystoresmithygeneratedtypes.KeyStoreConfig) (*Client, error) {
	var dafnyConfig = KeyStoreConfig_ToDafny(clientConfig)
	var dafny_response = KeyStore.Companion_Default___.KeyStore(dafnyConfig)
	if dafny_response.Is_Failure() {
		panic("Client construction failed. This should never happen")
	}
	var dafnyClient = dafny_response.Extract().(AwsCryptographyKeyStoreTypes.IKeyStoreClient)
	client := &Client{dafnyClient}
	return client, nil
}

func (client *Client) GetKeyStoreInfo(ctx context.Context) (*awscryptographykeystoresmithygeneratedtypes.GetKeyStoreInfoOutput, error) {

	var dafny_response = client.DafnyClient.GetKeyStoreInfo()
	if dafny_response.Is_Failure() {
		err := dafny_response.Dtor_error().(AwsCryptographyKeyStoreTypes.Error)
		return nil, Error_FromDafny(err)
	}
	var native_response = GetKeyStoreInfoOutput_FromDafny(dafny_response.Dtor_value().(AwsCryptographyKeyStoreTypes.GetKeyStoreInfoOutput))
	return &native_response, nil

}

func (client *Client) CreateKeyStore(ctx context.Context, params awscryptographykeystoresmithygeneratedtypes.CreateKeyStoreInput) (*awscryptographykeystoresmithygeneratedtypes.CreateKeyStoreOutput, error) {
	err := params.Validate()
	if err != nil {
		opaqueErr := awscryptographykeystoresmithygeneratedtypes.OpaqueError{
			ErrObject: err,
		}
		return nil, opaqueErr
	}

	var dafny_request AwsCryptographyKeyStoreTypes.CreateKeyStoreInput = CreateKeyStoreInput_ToDafny(params)
	var dafny_response = client.DafnyClient.CreateKeyStore(dafny_request)

	if dafny_response.Is_Failure() {
		err := dafny_response.Dtor_error().(AwsCryptographyKeyStoreTypes.Error)
		return nil, Error_FromDafny(err)
	}
	var native_response = CreateKeyStoreOutput_FromDafny(dafny_response.Dtor_value().(AwsCryptographyKeyStoreTypes.CreateKeyStoreOutput))
	return &native_response, nil

}

func (client *Client) CreateKey(ctx context.Context, params awscryptographykeystoresmithygeneratedtypes.CreateKeyInput) (*awscryptographykeystoresmithygeneratedtypes.CreateKeyOutput, error) {
	err := params.Validate()
	if err != nil {
		opaqueErr := awscryptographykeystoresmithygeneratedtypes.OpaqueError{
			ErrObject: err,
		}
		return nil, opaqueErr
	}

	var dafny_request AwsCryptographyKeyStoreTypes.CreateKeyInput = CreateKeyInput_ToDafny(params)
	var dafny_response = client.DafnyClient.CreateKey(dafny_request)

	if dafny_response.Is_Failure() {
		err := dafny_response.Dtor_error().(AwsCryptographyKeyStoreTypes.Error)
		return nil, Error_FromDafny(err)
	}
	var native_response = CreateKeyOutput_FromDafny(dafny_response.Dtor_value().(AwsCryptographyKeyStoreTypes.CreateKeyOutput))
	return &native_response, nil

}

func (client *Client) VersionKey(ctx context.Context, params awscryptographykeystoresmithygeneratedtypes.VersionKeyInput) (*awscryptographykeystoresmithygeneratedtypes.VersionKeyOutput, error) {
	err := params.Validate()
	if err != nil {
		opaqueErr := awscryptographykeystoresmithygeneratedtypes.OpaqueError{
			ErrObject: err,
		}
		return nil, opaqueErr
	}

	var dafny_request AwsCryptographyKeyStoreTypes.VersionKeyInput = VersionKeyInput_ToDafny(params)
	var dafny_response = client.DafnyClient.VersionKey(dafny_request)

	if dafny_response.Is_Failure() {
		err := dafny_response.Dtor_error().(AwsCryptographyKeyStoreTypes.Error)
		return nil, Error_FromDafny(err)
	}
	var native_response = VersionKeyOutput_FromDafny(dafny_response.Dtor_value().(AwsCryptographyKeyStoreTypes.VersionKeyOutput))
	return &native_response, nil

}

func (client *Client) GetActiveBranchKey(ctx context.Context, params awscryptographykeystoresmithygeneratedtypes.GetActiveBranchKeyInput) (*awscryptographykeystoresmithygeneratedtypes.GetActiveBranchKeyOutput, error) {
	err := params.Validate()
	if err != nil {
		opaqueErr := awscryptographykeystoresmithygeneratedtypes.OpaqueError{
			ErrObject: err,
		}
		return nil, opaqueErr
	}

	var dafny_request AwsCryptographyKeyStoreTypes.GetActiveBranchKeyInput = GetActiveBranchKeyInput_ToDafny(params)
	var dafny_response = client.DafnyClient.GetActiveBranchKey(dafny_request)

	if dafny_response.Is_Failure() {
		err := dafny_response.Dtor_error().(AwsCryptographyKeyStoreTypes.Error)
		return nil, Error_FromDafny(err)
	}
	var native_response = GetActiveBranchKeyOutput_FromDafny(dafny_response.Dtor_value().(AwsCryptographyKeyStoreTypes.GetActiveBranchKeyOutput))
	return &native_response, nil

}

func (client *Client) GetBranchKeyVersion(ctx context.Context, params awscryptographykeystoresmithygeneratedtypes.GetBranchKeyVersionInput) (*awscryptographykeystoresmithygeneratedtypes.GetBranchKeyVersionOutput, error) {
	err := params.Validate()
	if err != nil {
		opaqueErr := awscryptographykeystoresmithygeneratedtypes.OpaqueError{
			ErrObject: err,
		}
		return nil, opaqueErr
	}

	var dafny_request AwsCryptographyKeyStoreTypes.GetBranchKeyVersionInput = GetBranchKeyVersionInput_ToDafny(params)
	var dafny_response = client.DafnyClient.GetBranchKeyVersion(dafny_request)

	if dafny_response.Is_Failure() {
		err := dafny_response.Dtor_error().(AwsCryptographyKeyStoreTypes.Error)
		return nil, Error_FromDafny(err)
	}
	var native_response = GetBranchKeyVersionOutput_FromDafny(dafny_response.Dtor_value().(AwsCryptographyKeyStoreTypes.GetBranchKeyVersionOutput))
	return &native_response, nil

}

func (client *Client) GetBeaconKey(ctx context.Context, params awscryptographykeystoresmithygeneratedtypes.GetBeaconKeyInput) (*awscryptographykeystoresmithygeneratedtypes.GetBeaconKeyOutput, error) {
	err := params.Validate()
	if err != nil {
		opaqueErr := awscryptographykeystoresmithygeneratedtypes.OpaqueError{
			ErrObject: err,
		}
		return nil, opaqueErr
	}

	var dafny_request AwsCryptographyKeyStoreTypes.GetBeaconKeyInput = GetBeaconKeyInput_ToDafny(params)
	var dafny_response = client.DafnyClient.GetBeaconKey(dafny_request)

	if dafny_response.Is_Failure() {
		err := dafny_response.Dtor_error().(AwsCryptographyKeyStoreTypes.Error)
		return nil, Error_FromDafny(err)
	}
	var native_response = GetBeaconKeyOutput_FromDafny(dafny_response.Dtor_value().(AwsCryptographyKeyStoreTypes.GetBeaconKeyOutput))
	return &native_response, nil

}
