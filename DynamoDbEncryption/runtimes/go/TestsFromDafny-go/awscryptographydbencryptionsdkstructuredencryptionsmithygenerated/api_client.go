// Code generated by smithy-go-codegen DO NOT EDIT.

package awscryptographydbencryptionsdkstructuredencryptionsmithygenerated

import (
	"context"

	"github.com/aws/aws-database-encryption-sdk-dynamodb/AwsCryptographyDbEncryptionSdkStructuredEncryptionTypes"
	"github.com/aws/aws-database-encryption-sdk-dynamodb/StructuredEncryption"
	"github.com/aws/aws-database-encryption-sdk-dynamodb/awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes"
)

type Client struct {
	DafnyClient AwsCryptographyDbEncryptionSdkStructuredEncryptionTypes.IStructuredEncryptionClient
}

func NewClient(clientConfig awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.StructuredEncryptionConfig) (*Client, error) {
	var dafnyConfig = StructuredEncryptionConfig_ToDafny(clientConfig)
	var dafny_response = StructuredEncryption.Companion_Default___.StructuredEncryption(dafnyConfig)
	if dafny_response.Is_Failure() {
		panic("Client construction failed. This should never happen")
	}
	var dafnyClient = dafny_response.Extract().(AwsCryptographyDbEncryptionSdkStructuredEncryptionTypes.IStructuredEncryptionClient)
	client := &Client{dafnyClient}
	return client, nil
}

func (client *Client) EncryptStructure(ctx context.Context, params awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.EncryptStructureInput) (*awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.EncryptStructureOutput, error) {
	err := params.Validate()
	if err != nil {
		opaqueErr := awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.OpaqueError{
			ErrObject: err,
		}
		return nil, opaqueErr
	}

	var dafny_request AwsCryptographyDbEncryptionSdkStructuredEncryptionTypes.EncryptStructureInput = EncryptStructureInput_ToDafny(params)
	var dafny_response = client.DafnyClient.EncryptStructure(dafny_request)

	if dafny_response.Is_Failure() {
		err := dafny_response.Dtor_error().(AwsCryptographyDbEncryptionSdkStructuredEncryptionTypes.Error)
		return nil, Error_FromDafny(err)
	}
	var native_response = EncryptStructureOutput_FromDafny(dafny_response.Dtor_value().(AwsCryptographyDbEncryptionSdkStructuredEncryptionTypes.EncryptStructureOutput))
	return &native_response, nil

}

func (client *Client) DecryptStructure(ctx context.Context, params awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.DecryptStructureInput) (*awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.DecryptStructureOutput, error) {
	err := params.Validate()
	if err != nil {
		opaqueErr := awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.OpaqueError{
			ErrObject: err,
		}
		return nil, opaqueErr
	}

	var dafny_request AwsCryptographyDbEncryptionSdkStructuredEncryptionTypes.DecryptStructureInput = DecryptStructureInput_ToDafny(params)
	var dafny_response = client.DafnyClient.DecryptStructure(dafny_request)

	if dafny_response.Is_Failure() {
		err := dafny_response.Dtor_error().(AwsCryptographyDbEncryptionSdkStructuredEncryptionTypes.Error)
		return nil, Error_FromDafny(err)
	}
	var native_response = DecryptStructureOutput_FromDafny(dafny_response.Dtor_value().(AwsCryptographyDbEncryptionSdkStructuredEncryptionTypes.DecryptStructureOutput))
	return &native_response, nil

}

func (client *Client) EncryptPathStructure(ctx context.Context, params awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.EncryptPathStructureInput) (*awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.EncryptPathStructureOutput, error) {
	err := params.Validate()
	if err != nil {
		opaqueErr := awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.OpaqueError{
			ErrObject: err,
		}
		return nil, opaqueErr
	}

	var dafny_request AwsCryptographyDbEncryptionSdkStructuredEncryptionTypes.EncryptPathStructureInput = EncryptPathStructureInput_ToDafny(params)
	var dafny_response = client.DafnyClient.EncryptPathStructure(dafny_request)

	if dafny_response.Is_Failure() {
		err := dafny_response.Dtor_error().(AwsCryptographyDbEncryptionSdkStructuredEncryptionTypes.Error)
		return nil, Error_FromDafny(err)
	}
	var native_response = EncryptPathStructureOutput_FromDafny(dafny_response.Dtor_value().(AwsCryptographyDbEncryptionSdkStructuredEncryptionTypes.EncryptPathStructureOutput))
	return &native_response, nil

}

func (client *Client) DecryptPathStructure(ctx context.Context, params awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.DecryptPathStructureInput) (*awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.DecryptPathStructureOutput, error) {
	err := params.Validate()
	if err != nil {
		opaqueErr := awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.OpaqueError{
			ErrObject: err,
		}
		return nil, opaqueErr
	}

	var dafny_request AwsCryptographyDbEncryptionSdkStructuredEncryptionTypes.DecryptPathStructureInput = DecryptPathStructureInput_ToDafny(params)
	var dafny_response = client.DafnyClient.DecryptPathStructure(dafny_request)

	if dafny_response.Is_Failure() {
		err := dafny_response.Dtor_error().(AwsCryptographyDbEncryptionSdkStructuredEncryptionTypes.Error)
		return nil, Error_FromDafny(err)
	}
	var native_response = DecryptPathStructureOutput_FromDafny(dafny_response.Dtor_value().(AwsCryptographyDbEncryptionSdkStructuredEncryptionTypes.DecryptPathStructureOutput))
	return &native_response, nil

}

func (client *Client) ResolveAuthActions(ctx context.Context, params awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.ResolveAuthActionsInput) (*awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.ResolveAuthActionsOutput, error) {
	err := params.Validate()
	if err != nil {
		opaqueErr := awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.OpaqueError{
			ErrObject: err,
		}
		return nil, opaqueErr
	}

	var dafny_request AwsCryptographyDbEncryptionSdkStructuredEncryptionTypes.ResolveAuthActionsInput = ResolveAuthActionsInput_ToDafny(params)
	var dafny_response = client.DafnyClient.ResolveAuthActions(dafny_request)

	if dafny_response.Is_Failure() {
		err := dafny_response.Dtor_error().(AwsCryptographyDbEncryptionSdkStructuredEncryptionTypes.Error)
		return nil, Error_FromDafny(err)
	}
	var native_response = ResolveAuthActionsOutput_FromDafny(dafny_response.Dtor_value().(AwsCryptographyDbEncryptionSdkStructuredEncryptionTypes.ResolveAuthActionsOutput))
	return &native_response, nil

}
