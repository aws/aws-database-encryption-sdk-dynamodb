// Code generated by smithy-go-codegen DO NOT EDIT.

package awscryptographydbencryptionsdkdynamodbitemencryptorsmithygeneratedtypes

import (
	"fmt"
	"unicode/utf8"

	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/mpl/awscryptographymaterialproviderssmithygeneratedtypes"
	"github.com/aws/aws-database-encryption-sdk-dynamodb/releases/go/dynamodb-esdk/awscryptographydbencryptionsdkdynamodbsmithygeneratedtypes"
	"github.com/aws/aws-database-encryption-sdk-dynamodb/releases/go/dynamodb-esdk/awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes"
	dynamodbtypes "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
)

type DecryptItemInput struct {
	EncryptedItem map[string]dynamodbtypes.AttributeValue
}

func (input DecryptItemInput) Validate() error {
	if input.EncryptedItem == nil {
		return fmt.Errorf("input.EncryptedItem is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_DecryptItemInput_encryptedItem_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_DecryptItemInput_encryptedItem_Validate()
	}

	return nil
}

func (input DecryptItemInput) Com_amazonaws_dynamodb_AttributeMap_value_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
	case *dynamodbtypes.AttributeValueMemberL:
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input DecryptItemInput) Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
		if input.Com_amazonaws_dynamodb_AttributeValue_M_Validate(unionType.Value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeValue_M_Validate(unionType.Value)
		}
	case *dynamodbtypes.AttributeValueMemberL:
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input DecryptItemInput) Com_amazonaws_dynamodb_AttributeValue_M_Validate(Value map[string]dynamodbtypes.AttributeValue) error {
	for key, value := range Value {
		if len(key) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(key))
		}
		if len(key) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(key))
		}
		if input.Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(value) != nil {
			return input.Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(value)
		}
	}

	return nil
}
func (input DecryptItemInput) Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
	case *dynamodbtypes.AttributeValueMemberL:
		if input.Com_amazonaws_dynamodb_AttributeValue_L_Validate(unionType.Value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeValue_L_Validate(unionType.Value)
		}
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input DecryptItemInput) Com_amazonaws_dynamodb_AttributeValue_L_Validate(Value []dynamodbtypes.AttributeValue) error {
	for _, item := range Value {
		if input.Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(item) != nil {
			return input.Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(item)
		}
	}

	return nil
}
func (input DecryptItemInput) Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_DecryptItemInput_encryptedItem_Validate() error {
	for key, value := range input.EncryptedItem {
		if len(key) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(key))
		}
		if len(key) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(key))
		}
		if input.Com_amazonaws_dynamodb_AttributeMap_value_Validate(value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeMap_value_Validate(value)
		}
	}

	return nil
}

type EncryptItemInput struct {
	PlaintextItem map[string]dynamodbtypes.AttributeValue
}

func (input EncryptItemInput) Validate() error {
	if input.PlaintextItem == nil {
		return fmt.Errorf("input.PlaintextItem is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_EncryptItemInput_plaintextItem_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_EncryptItemInput_plaintextItem_Validate()
	}

	return nil
}

func (input EncryptItemInput) Com_amazonaws_dynamodb_AttributeMap_value_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
	case *dynamodbtypes.AttributeValueMemberL:
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input EncryptItemInput) Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
		if input.Com_amazonaws_dynamodb_AttributeValue_M_Validate(unionType.Value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeValue_M_Validate(unionType.Value)
		}
	case *dynamodbtypes.AttributeValueMemberL:
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input EncryptItemInput) Com_amazonaws_dynamodb_AttributeValue_M_Validate(Value map[string]dynamodbtypes.AttributeValue) error {
	for key, value := range Value {
		if len(key) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(key))
		}
		if len(key) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(key))
		}
		if input.Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(value) != nil {
			return input.Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(value)
		}
	}

	return nil
}
func (input EncryptItemInput) Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
	case *dynamodbtypes.AttributeValueMemberL:
		if input.Com_amazonaws_dynamodb_AttributeValue_L_Validate(unionType.Value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeValue_L_Validate(unionType.Value)
		}
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input EncryptItemInput) Com_amazonaws_dynamodb_AttributeValue_L_Validate(Value []dynamodbtypes.AttributeValue) error {
	for _, item := range Value {
		if input.Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(item) != nil {
			return input.Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(item)
		}
	}

	return nil
}
func (input EncryptItemInput) Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_EncryptItemInput_plaintextItem_Validate() error {
	for key, value := range input.PlaintextItem {
		if len(key) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(key))
		}
		if len(key) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(key))
		}
		if input.Com_amazonaws_dynamodb_AttributeMap_value_Validate(value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeMap_value_Validate(value)
		}
	}

	return nil
}

type ParsedHeader struct {
	AlgorithmSuiteId awscryptographymaterialproviderssmithygeneratedtypes.DBEAlgorithmSuiteId

	AttributeActionsOnEncrypt map[string]awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.CryptoAction

	EncryptedDataKeys []awscryptographymaterialproviderssmithygeneratedtypes.EncryptedDataKey

	EncryptionContext map[string]string

	SelectorContext map[string]dynamodbtypes.AttributeValue

	StoredEncryptionContext map[string]string
}

func (input ParsedHeader) Validate() error {
	if input.AttributeActionsOnEncrypt == nil {
		return fmt.Errorf("input.AttributeActionsOnEncrypt is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_ParsedHeader_attributeActionsOnEncrypt_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_ParsedHeader_attributeActionsOnEncrypt_Validate()
	}
	if input.EncryptedDataKeys == nil {
		return fmt.Errorf("input.EncryptedDataKeys is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_ParsedHeader_encryptedDataKeys_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_ParsedHeader_encryptedDataKeys_Validate()
	}
	if input.EncryptionContext == nil {
		return fmt.Errorf("input.EncryptionContext is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_ParsedHeader_encryptionContext_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_ParsedHeader_encryptionContext_Validate()
	}
	if input.SelectorContext == nil {
		return fmt.Errorf("input.SelectorContext is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_ParsedHeader_selectorContext_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_ParsedHeader_selectorContext_Validate()
	}
	if input.StoredEncryptionContext == nil {
		return fmt.Errorf("input.StoredEncryptionContext is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_ParsedHeader_storedEncryptionContext_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_ParsedHeader_storedEncryptionContext_Validate()
	}

	return nil
}

func (input ParsedHeader) Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_ParsedHeader_attributeActionsOnEncrypt_Validate() error {
	for key, _ := range input.AttributeActionsOnEncrypt {
		if len(key) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(key))
		}
		if len(key) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(key))
		}
	}

	return nil
}
func (input ParsedHeader) Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_ParsedHeader_encryptedDataKeys_Validate() error {
	for _, item := range input.EncryptedDataKeys {
		if item.Validate() != nil {
			return item.Validate()
		}
	}

	return nil
}
func (input ParsedHeader) Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_ParsedHeader_encryptionContext_Validate() error {
	for key, value := range input.EncryptionContext {
		if !utf8.ValidString(key) {
			return fmt.Errorf("Invalid UTF bytes %s ", key)
		}
		if !utf8.ValidString(value) {
			return fmt.Errorf("Invalid UTF bytes %s ", value)
		}
	}

	return nil
}
func (input ParsedHeader) Com_amazonaws_dynamodb_Key_value_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
	case *dynamodbtypes.AttributeValueMemberL:
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input ParsedHeader) Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
		if input.Com_amazonaws_dynamodb_AttributeValue_M_Validate(unionType.Value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeValue_M_Validate(unionType.Value)
		}
	case *dynamodbtypes.AttributeValueMemberL:
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input ParsedHeader) Com_amazonaws_dynamodb_AttributeValue_M_Validate(Value map[string]dynamodbtypes.AttributeValue) error {
	for key, value := range Value {
		if len(key) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(key))
		}
		if len(key) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(key))
		}
		if input.Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(value) != nil {
			return input.Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(value)
		}
	}

	return nil
}
func (input ParsedHeader) Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
	case *dynamodbtypes.AttributeValueMemberL:
		if input.Com_amazonaws_dynamodb_AttributeValue_L_Validate(unionType.Value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeValue_L_Validate(unionType.Value)
		}
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input ParsedHeader) Com_amazonaws_dynamodb_AttributeValue_L_Validate(Value []dynamodbtypes.AttributeValue) error {
	for _, item := range Value {
		if input.Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(item) != nil {
			return input.Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(item)
		}
	}

	return nil
}
func (input ParsedHeader) Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_ParsedHeader_selectorContext_Validate() error {
	for key, value := range input.SelectorContext {
		if len(key) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(key))
		}
		if len(key) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(key))
		}
		if input.Com_amazonaws_dynamodb_Key_value_Validate(value) != nil {
			return input.Com_amazonaws_dynamodb_Key_value_Validate(value)
		}
	}

	return nil
}
func (input ParsedHeader) Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_ParsedHeader_storedEncryptionContext_Validate() error {
	for key, value := range input.StoredEncryptionContext {
		if !utf8.ValidString(key) {
			return fmt.Errorf("Invalid UTF bytes %s ", key)
		}
		if !utf8.ValidString(value) {
			return fmt.Errorf("Invalid UTF bytes %s ", value)
		}
	}

	return nil
}

type DecryptItemOutput struct {
	PlaintextItem map[string]dynamodbtypes.AttributeValue

	ParsedHeader *ParsedHeader
}

func (input DecryptItemOutput) Validate() error {
	if input.PlaintextItem == nil {
		return fmt.Errorf("input.PlaintextItem is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_DecryptItemOutput_plaintextItem_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_DecryptItemOutput_plaintextItem_Validate()
	}
	if input.ParsedHeader != nil {
		if input.ParsedHeader.Validate() != nil {
			return input.ParsedHeader.Validate()
		}

	}

	return nil
}

func (input DecryptItemOutput) Com_amazonaws_dynamodb_AttributeMap_value_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
	case *dynamodbtypes.AttributeValueMemberL:
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input DecryptItemOutput) Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
		if input.Com_amazonaws_dynamodb_AttributeValue_M_Validate(unionType.Value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeValue_M_Validate(unionType.Value)
		}
	case *dynamodbtypes.AttributeValueMemberL:
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input DecryptItemOutput) Com_amazonaws_dynamodb_AttributeValue_M_Validate(Value map[string]dynamodbtypes.AttributeValue) error {
	for key, value := range Value {
		if len(key) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(key))
		}
		if len(key) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(key))
		}
		if input.Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(value) != nil {
			return input.Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(value)
		}
	}

	return nil
}
func (input DecryptItemOutput) Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
	case *dynamodbtypes.AttributeValueMemberL:
		if input.Com_amazonaws_dynamodb_AttributeValue_L_Validate(unionType.Value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeValue_L_Validate(unionType.Value)
		}
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input DecryptItemOutput) Com_amazonaws_dynamodb_AttributeValue_L_Validate(Value []dynamodbtypes.AttributeValue) error {
	for _, item := range Value {
		if input.Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(item) != nil {
			return input.Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(item)
		}
	}

	return nil
}
func (input DecryptItemOutput) Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_DecryptItemOutput_plaintextItem_Validate() error {
	for key, value := range input.PlaintextItem {
		if len(key) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(key))
		}
		if len(key) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(key))
		}
		if input.Com_amazonaws_dynamodb_AttributeMap_value_Validate(value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeMap_value_Validate(value)
		}
	}

	return nil
}

type EncryptItemOutput struct {
	EncryptedItem map[string]dynamodbtypes.AttributeValue

	ParsedHeader *ParsedHeader
}

func (input EncryptItemOutput) Validate() error {
	if input.EncryptedItem == nil {
		return fmt.Errorf("input.EncryptedItem is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_EncryptItemOutput_encryptedItem_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_EncryptItemOutput_encryptedItem_Validate()
	}
	if input.ParsedHeader != nil {
		if input.ParsedHeader.Validate() != nil {
			return input.ParsedHeader.Validate()
		}

	}

	return nil
}

func (input EncryptItemOutput) Com_amazonaws_dynamodb_AttributeMap_value_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
	case *dynamodbtypes.AttributeValueMemberL:
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input EncryptItemOutput) Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
		if input.Com_amazonaws_dynamodb_AttributeValue_M_Validate(unionType.Value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeValue_M_Validate(unionType.Value)
		}
	case *dynamodbtypes.AttributeValueMemberL:
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input EncryptItemOutput) Com_amazonaws_dynamodb_AttributeValue_M_Validate(Value map[string]dynamodbtypes.AttributeValue) error {
	for key, value := range Value {
		if len(key) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(key))
		}
		if len(key) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(key))
		}
		if input.Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(value) != nil {
			return input.Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(value)
		}
	}

	return nil
}
func (input EncryptItemOutput) Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
	case *dynamodbtypes.AttributeValueMemberL:
		if input.Com_amazonaws_dynamodb_AttributeValue_L_Validate(unionType.Value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeValue_L_Validate(unionType.Value)
		}
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input EncryptItemOutput) Com_amazonaws_dynamodb_AttributeValue_L_Validate(Value []dynamodbtypes.AttributeValue) error {
	for _, item := range Value {
		if input.Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(item) != nil {
			return input.Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(item)
		}
	}

	return nil
}
func (input EncryptItemOutput) Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_EncryptItemOutput_encryptedItem_Validate() error {
	for key, value := range input.EncryptedItem {
		if len(key) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(key))
		}
		if len(key) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(key))
		}
		if input.Com_amazonaws_dynamodb_AttributeMap_value_Validate(value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeMap_value_Validate(value)
		}
	}

	return nil
}

type AtomicPrimitivesReference struct {
}

func (input AtomicPrimitivesReference) Validate() error {

	return nil
}

type DynamoDbItemEncryptorConfig struct {
	AttributeActionsOnEncrypt map[string]awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.CryptoAction

	LogicalTableName string

	PartitionKeyName string

	AlgorithmSuiteId *awscryptographymaterialproviderssmithygeneratedtypes.DBEAlgorithmSuiteId

	AllowedUnsignedAttributePrefix *string

	AllowedUnsignedAttributes []string

	Cmm awscryptographymaterialproviderssmithygeneratedtypes.ICryptographicMaterialsManager

	Keyring awscryptographymaterialproviderssmithygeneratedtypes.IKeyring

	LegacyOverride *awscryptographydbencryptionsdkdynamodbsmithygeneratedtypes.LegacyOverride

	PlaintextOverride *awscryptographydbencryptionsdkdynamodbsmithygeneratedtypes.PlaintextOverride

	SortKeyName *string
}

func (input DynamoDbItemEncryptorConfig) Validate() error {
	if input.AttributeActionsOnEncrypt == nil {
		return fmt.Errorf("input.AttributeActionsOnEncrypt is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_DynamoDbItemEncryptorConfig_attributeActionsOnEncrypt_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_DynamoDbItemEncryptorConfig_attributeActionsOnEncrypt_Validate()
	}
	if len(input.PartitionKeyName) < 1 {
		return fmt.Errorf("KeySchemaAttributeName has a minimum length of 1 but has the length of %d.", len(input.PartitionKeyName))
	}
	if len(input.PartitionKeyName) > 255 {
		return fmt.Errorf("KeySchemaAttributeName has a maximum length of 255 but has the length of %d.", len(input.PartitionKeyName))
	}
	if len(input.AllowedUnsignedAttributes) < 1 {
		return fmt.Errorf("AttributeNameList has a minimum length of 1 but has the length of %d.", len(input.AllowedUnsignedAttributes))
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_DynamoDbItemEncryptorConfig_allowedUnsignedAttributes_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_DynamoDbItemEncryptorConfig_allowedUnsignedAttributes_Validate()
	}
	if input.LegacyOverride != nil {
		if input.LegacyOverride.Validate() != nil {
			return input.LegacyOverride.Validate()
		}

	}
	if input.SortKeyName != nil {
		if len(*input.SortKeyName) < 1 {
			return fmt.Errorf("KeySchemaAttributeName has a minimum length of 1 but has the length of %d.", len(*input.SortKeyName))
		}
		if len(*input.SortKeyName) > 255 {
			return fmt.Errorf("KeySchemaAttributeName has a maximum length of 255 but has the length of %d.", len(*input.SortKeyName))
		}
	}

	return nil
}

func (input DynamoDbItemEncryptorConfig) Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_DynamoDbItemEncryptorConfig_attributeActionsOnEncrypt_Validate() error {
	for key, _ := range input.AttributeActionsOnEncrypt {
		if len(key) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(key))
		}
		if len(key) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(key))
		}
	}

	return nil
}
func (input DynamoDbItemEncryptorConfig) Aws_cryptography_dbEncryptionSdk_dynamoDb_itemEncryptor_DynamoDbItemEncryptorConfig_allowedUnsignedAttributes_Validate() error {
	for _, item := range input.AllowedUnsignedAttributes {
		if len(item) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(item))
		}
		if len(item) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(item))
		}
	}

	return nil
}

type StructuredEncryptionReference struct {
}

func (input StructuredEncryptionReference) Validate() error {

	return nil
}

type DynamoDbItemEncryptorBaseException interface {
	// This is a dummy method to allow type assertion since Go empty interfaces
	// aren't useful for type assertion checks. No concrete class is expected to implement
	// this method. This is also not exported.
	interfaceBindingMethod()
}
