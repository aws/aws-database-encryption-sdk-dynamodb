// Code generated by smithy-go-codegen DO NOT EDIT.

package awscryptographydbencryptionsdkdynamodbsmithygeneratedtypes

import (
	"fmt"

	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/mpl/awscryptographykeystoresmithygenerated"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/mpl/awscryptographymaterialproviderssmithygeneratedtypes"
	"github.com/aws/aws-database-encryption-sdk-dynamodb/releases/go/dynamodb-esdk/awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes"
	dynamodbtypes "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
)

type DynamoDbKeyBranchKeyIdSupplierReference struct {
}

func (input DynamoDbKeyBranchKeyIdSupplierReference) Validate() error {

	return nil
}

type CreateDynamoDbEncryptionBranchKeyIdSupplierInput struct {
	DdbKeyBranchKeyIdSupplier IDynamoDbKeyBranchKeyIdSupplier
}

func (input CreateDynamoDbEncryptionBranchKeyIdSupplierInput) Validate() error {

	return nil
}

type CreateDynamoDbEncryptionBranchKeyIdSupplierOutput struct {
	BranchKeyIdSupplier awscryptographymaterialproviderssmithygeneratedtypes.IBranchKeyIdSupplier
}

func (input CreateDynamoDbEncryptionBranchKeyIdSupplierOutput) Validate() error {

	return nil
}

type EncryptedDataKeyDescription struct {
	KeyProviderId string

	BranchKeyId *string

	BranchKeyVersion *string

	KeyProviderInfo *string
}

func (input EncryptedDataKeyDescription) Validate() error {

	return nil
}

type GetEncryptedDataKeyDescriptionOutput struct {
	EncryptedDataKeyDescriptionOutput []EncryptedDataKeyDescription
}

func (input GetEncryptedDataKeyDescriptionOutput) Validate() error {
	if input.EncryptedDataKeyDescriptionOutput == nil {
		return fmt.Errorf("input.EncryptedDataKeyDescriptionOutput is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_GetEncryptedDataKeyDescriptionOutput_EncryptedDataKeyDescriptionOutput_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_GetEncryptedDataKeyDescriptionOutput_EncryptedDataKeyDescriptionOutput_Validate()
	}

	return nil
}

func (input GetEncryptedDataKeyDescriptionOutput) Aws_cryptography_dbEncryptionSdk_dynamoDb_GetEncryptedDataKeyDescriptionOutput_EncryptedDataKeyDescriptionOutput_Validate() error {
	for _, item := range input.EncryptedDataKeyDescriptionOutput {
		if item.Validate() != nil {
			return item.Validate()
		}
	}

	return nil
}

type GetEncryptedDataKeyDescriptionInput struct {
	Input GetEncryptedDataKeyDescriptionUnion
}

func (input GetEncryptedDataKeyDescriptionInput) Validate() error {
	if input.Input == nil {
		return fmt.Errorf("input.Input is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_GetEncryptedDataKeyDescriptionInput_input_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_GetEncryptedDataKeyDescriptionInput_input_Validate()
	}

	return nil
}

func (input GetEncryptedDataKeyDescriptionInput) Aws_cryptography_dbEncryptionSdk_dynamoDb_GetEncryptedDataKeyDescriptionInput_input_Validate() error {
	if input.Input == nil {
		return nil
	}
	switch unionType := input.Input.(type) {
	case *GetEncryptedDataKeyDescriptionUnionMemberheader:
	case *GetEncryptedDataKeyDescriptionUnionMemberitem:
		if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_GetEncryptedDataKeyDescriptionUnion_item_Validate(unionType.Value) != nil {
			return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_GetEncryptedDataKeyDescriptionUnion_item_Validate(unionType.Value)
		}
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input GetEncryptedDataKeyDescriptionInput) Com_amazonaws_dynamodb_AttributeMap_value_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
	case *dynamodbtypes.AttributeValueMemberL:
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input GetEncryptedDataKeyDescriptionInput) Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
		if input.Com_amazonaws_dynamodb_AttributeValue_M_Validate(unionType.Value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeValue_M_Validate(unionType.Value)
		}
	case *dynamodbtypes.AttributeValueMemberL:
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input GetEncryptedDataKeyDescriptionInput) Com_amazonaws_dynamodb_AttributeValue_M_Validate(Value map[string]dynamodbtypes.AttributeValue) error {
	for key, value := range Value {
		if len(key) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(key))
		}
		if len(key) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(key))
		}
		if input.Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(value) != nil {
			return input.Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(value)
		}
	}

	return nil
}
func (input GetEncryptedDataKeyDescriptionInput) Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
	case *dynamodbtypes.AttributeValueMemberL:
		if input.Com_amazonaws_dynamodb_AttributeValue_L_Validate(unionType.Value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeValue_L_Validate(unionType.Value)
		}
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input GetEncryptedDataKeyDescriptionInput) Com_amazonaws_dynamodb_AttributeValue_L_Validate(Value []dynamodbtypes.AttributeValue) error {
	for _, item := range Value {
		if input.Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(item) != nil {
			return input.Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(item)
		}
	}

	return nil
}
func (input GetEncryptedDataKeyDescriptionInput) Aws_cryptography_dbEncryptionSdk_dynamoDb_GetEncryptedDataKeyDescriptionUnion_item_Validate(Value map[string]dynamodbtypes.AttributeValue) error {
	for key, value := range Value {
		if len(key) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(key))
		}
		if len(key) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(key))
		}
		if input.Com_amazonaws_dynamodb_AttributeMap_value_Validate(value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeMap_value_Validate(value)
		}
	}

	return nil
}

type AsSet struct {
}

func (input AsSet) Validate() error {

	return nil
}

type AtomicPrimitivesReference struct {
}

func (input AtomicPrimitivesReference) Validate() error {

	return nil
}

type MultiKeyStore struct {
	CacheTTL int32

	KeyFieldName string

	Cache awscryptographymaterialproviderssmithygeneratedtypes.CacheType

	PartitionId *string
}

func (input MultiKeyStore) Validate() error {
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_MultiKeyStore_cache_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_MultiKeyStore_cache_Validate()
	}

	return nil
}

func (input MultiKeyStore) Aws_cryptography_dbEncryptionSdk_dynamoDb_MultiKeyStore_cache_Validate() error {
	if input.Cache == nil {
		return nil
	}
	switch unionType := input.Cache.(type) {
	case *awscryptographymaterialproviderssmithygeneratedtypes.CacheTypeMemberDefault:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *awscryptographymaterialproviderssmithygeneratedtypes.CacheTypeMemberNo:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *awscryptographymaterialproviderssmithygeneratedtypes.CacheTypeMemberSingleThreaded:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *awscryptographymaterialproviderssmithygeneratedtypes.CacheTypeMemberMultiThreaded:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *awscryptographymaterialproviderssmithygeneratedtypes.CacheTypeMemberStormTracking:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *awscryptographymaterialproviderssmithygeneratedtypes.CacheTypeMemberShared:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}

type SingleKeyStore struct {
	CacheTTL int32

	KeyId string

	Cache awscryptographymaterialproviderssmithygeneratedtypes.CacheType

	PartitionId *string
}

func (input SingleKeyStore) Validate() error {
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_SingleKeyStore_cache_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_SingleKeyStore_cache_Validate()
	}

	return nil
}

func (input SingleKeyStore) Aws_cryptography_dbEncryptionSdk_dynamoDb_SingleKeyStore_cache_Validate() error {
	if input.Cache == nil {
		return nil
	}
	switch unionType := input.Cache.(type) {
	case *awscryptographymaterialproviderssmithygeneratedtypes.CacheTypeMemberDefault:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *awscryptographymaterialproviderssmithygeneratedtypes.CacheTypeMemberNo:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *awscryptographymaterialproviderssmithygeneratedtypes.CacheTypeMemberSingleThreaded:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *awscryptographymaterialproviderssmithygeneratedtypes.CacheTypeMemberMultiThreaded:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *awscryptographymaterialproviderssmithygeneratedtypes.CacheTypeMemberStormTracking:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *awscryptographymaterialproviderssmithygeneratedtypes.CacheTypeMemberShared:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}

type PartOnly struct {
}

func (input PartOnly) Validate() error {

	return nil
}

type Shared struct {
	Other string
}

func (input Shared) Validate() error {

	return nil
}

type SharedSet struct {
	Other string
}

func (input SharedSet) Validate() error {

	return nil
}

type ConstructorPart struct {
	Name string

	Required bool
}

func (input ConstructorPart) Validate() error {

	return nil
}

type Constructor struct {
	Parts []ConstructorPart
}

func (input Constructor) Validate() error {
	if len(input.Parts) < 1 {
		return fmt.Errorf("ConstructorPartList has a minimum length of 1 but has the length of %d.", len(input.Parts))
	}
	if input.Parts == nil {
		return fmt.Errorf("input.Parts is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_Constructor_parts_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_Constructor_parts_Validate()
	}

	return nil
}

func (input Constructor) Aws_cryptography_dbEncryptionSdk_dynamoDb_Constructor_parts_Validate() error {
	for _, item := range input.Parts {
		if item.Validate() != nil {
			return item.Validate()
		}
	}

	return nil
}

type EncryptedPart struct {
	Name string

	Prefix string
}

func (input EncryptedPart) Validate() error {
	if len(input.Prefix) < 1 {
		return fmt.Errorf("Prefix has a minimum length of 1 but has the length of %d.", len(input.Prefix))
	}

	return nil
}

type SignedPart struct {
	Name string

	Prefix string

	Loc *string
}

func (input SignedPart) Validate() error {
	if len(input.Prefix) < 1 {
		return fmt.Errorf("Prefix has a minimum length of 1 but has the length of %d.", len(input.Prefix))
	}
	if input.Loc != nil {
		if len(*input.Loc) < 1 {
			return fmt.Errorf("TerminalLocation has a minimum length of 1 but has the length of %d.", len(*input.Loc))
		}
	}

	return nil
}

type CompoundBeacon struct {
	Name string

	Split string

	Constructors []Constructor

	Encrypted []EncryptedPart

	Signed []SignedPart
}

func (input CompoundBeacon) Validate() error {
	if len(input.Split) < 1 {
		return fmt.Errorf("Char has a minimum length of 1 but has the length of %d.", len(input.Split))
	}
	if len(input.Split) > 1 {
		return fmt.Errorf("Char has a maximum length of 1 but has the length of %d.", len(input.Split))
	}
	if len(input.Constructors) < 1 {
		return fmt.Errorf("ConstructorList has a minimum length of 1 but has the length of %d.", len(input.Constructors))
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_CompoundBeacon_constructors_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_CompoundBeacon_constructors_Validate()
	}
	if len(input.Encrypted) < 1 {
		return fmt.Errorf("EncryptedPartsList has a minimum length of 1 but has the length of %d.", len(input.Encrypted))
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_CompoundBeacon_encrypted_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_CompoundBeacon_encrypted_Validate()
	}
	if len(input.Signed) < 1 {
		return fmt.Errorf("SignedPartsList has a minimum length of 1 but has the length of %d.", len(input.Signed))
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_CompoundBeacon_signed_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_CompoundBeacon_signed_Validate()
	}

	return nil
}

func (input CompoundBeacon) Aws_cryptography_dbEncryptionSdk_dynamoDb_CompoundBeacon_constructors_Validate() error {
	for _, item := range input.Constructors {
		if item.Validate() != nil {
			return item.Validate()
		}
	}

	return nil
}
func (input CompoundBeacon) Aws_cryptography_dbEncryptionSdk_dynamoDb_CompoundBeacon_encrypted_Validate() error {
	for _, item := range input.Encrypted {
		if item.Validate() != nil {
			return item.Validate()
		}
	}

	return nil
}
func (input CompoundBeacon) Aws_cryptography_dbEncryptionSdk_dynamoDb_CompoundBeacon_signed_Validate() error {
	for _, item := range input.Signed {
		if item.Validate() != nil {
			return item.Validate()
		}
	}

	return nil
}

type KeyStoreReference struct {
}

func (input KeyStoreReference) Validate() error {

	return nil
}

type StandardBeacon struct {
	Length int32

	Name string

	Loc *string

	NumberOfBuckets *int32

	Style BeaconStyle
}

func (input StandardBeacon) Validate() error {
	if input.Length < 1 {
		return fmt.Errorf("BeaconBitLength has a minimum of 1 but has the value of %d.", input.Length)
	}
	if input.Length > 63 {
		return fmt.Errorf("BeaconBitLength has a maximum of 63 but has the value of %d.", input.Length)
	}
	if input.Loc != nil {
		if len(*input.Loc) < 1 {
			return fmt.Errorf("TerminalLocation has a minimum length of 1 but has the length of %d.", len(*input.Loc))
		}
	}
	if input.NumberOfBuckets != nil {
		if *input.NumberOfBuckets < 1 {
			return fmt.Errorf("BucketCount has a minimum of 1 but has the value of %d.", *input.NumberOfBuckets)
		}
		if *input.NumberOfBuckets > 255 {
			return fmt.Errorf("BucketCount has a maximum of 255 but has the value of %d.", *input.NumberOfBuckets)
		}
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_StandardBeacon_style_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_StandardBeacon_style_Validate()
	}

	return nil
}

func (input StandardBeacon) Aws_cryptography_dbEncryptionSdk_dynamoDb_StandardBeacon_style_Validate() error {
	if input.Style == nil {
		return nil
	}
	switch unionType := input.Style.(type) {
	case *BeaconStyleMemberpartOnly:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *BeaconStyleMembershared:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *BeaconStyleMemberasSet:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *BeaconStyleMembersharedSet:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}

type Insert struct {
	Literal string
}

func (input Insert) Validate() error {

	return nil
}

type Lower struct {
}

func (input Lower) Validate() error {

	return nil
}

type GetPrefix struct {
	Length int32
}

func (input GetPrefix) Validate() error {

	return nil
}

type GetSegment struct {
	Index int32

	Split string
}

func (input GetSegment) Validate() error {
	if len(input.Split) < 1 {
		return fmt.Errorf("Char has a minimum length of 1 but has the length of %d.", len(input.Split))
	}
	if len(input.Split) > 1 {
		return fmt.Errorf("Char has a maximum length of 1 but has the length of %d.", len(input.Split))
	}

	return nil
}

type GetSegments struct {
	High int32

	Low int32

	Split string
}

func (input GetSegments) Validate() error {
	if len(input.Split) < 1 {
		return fmt.Errorf("Char has a minimum length of 1 but has the length of %d.", len(input.Split))
	}
	if len(input.Split) > 1 {
		return fmt.Errorf("Char has a maximum length of 1 but has the length of %d.", len(input.Split))
	}

	return nil
}

type GetSubstring struct {
	High int32

	Low int32
}

func (input GetSubstring) Validate() error {

	return nil
}

type GetSuffix struct {
	Length int32
}

func (input GetSuffix) Validate() error {

	return nil
}

type Upper struct {
}

func (input Upper) Validate() error {

	return nil
}

type VirtualPart struct {
	Loc string

	Trans []VirtualTransform
}

func (input VirtualPart) Validate() error {
	if len(input.Loc) < 1 {
		return fmt.Errorf("TerminalLocation has a minimum length of 1 but has the length of %d.", len(input.Loc))
	}
	if len(input.Trans) < 1 {
		return fmt.Errorf("VirtualTransformList has a minimum length of 1 but has the length of %d.", len(input.Trans))
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_VirtualPart_trans_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_VirtualPart_trans_Validate()
	}

	return nil
}

func (input VirtualPart) Aws_cryptography_dbEncryptionSdk_dynamoDb_VirtualTransformList_member_Validate(Value VirtualTransform) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *VirtualTransformMemberupper:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *VirtualTransformMemberlower:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *VirtualTransformMemberinsert:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *VirtualTransformMemberprefix:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *VirtualTransformMembersuffix:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *VirtualTransformMembersubstring:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *VirtualTransformMembersegment:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *VirtualTransformMembersegments:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input VirtualPart) Aws_cryptography_dbEncryptionSdk_dynamoDb_VirtualPart_trans_Validate() error {
	for _, item := range input.Trans {
		if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_VirtualTransformList_member_Validate(item) != nil {
			return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_VirtualTransformList_member_Validate(item)
		}
	}

	return nil
}

type VirtualField struct {
	Name string

	Parts []VirtualPart
}

func (input VirtualField) Validate() error {
	if len(input.Parts) < 1 {
		return fmt.Errorf("VirtualPartList has a minimum length of 1 but has the length of %d.", len(input.Parts))
	}
	if input.Parts == nil {
		return fmt.Errorf("input.Parts is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_VirtualField_parts_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_VirtualField_parts_Validate()
	}

	return nil
}

func (input VirtualField) Aws_cryptography_dbEncryptionSdk_dynamoDb_VirtualField_parts_Validate() error {
	for _, item := range input.Parts {
		if item.Validate() != nil {
			return item.Validate()
		}
	}

	return nil
}

type BeaconVersion struct {
	KeySource BeaconKeySource

	KeyStore *awscryptographykeystoresmithygenerated.Client

	StandardBeacons []StandardBeacon

	Version int32

	CompoundBeacons []CompoundBeacon

	EncryptedParts []EncryptedPart

	NumberOfBuckets *int32

	SignedParts []SignedPart

	VirtualFields []VirtualField
}

func (input BeaconVersion) Validate() error {
	if input.KeySource == nil {
		return fmt.Errorf("input.KeySource is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_BeaconVersion_keySource_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_BeaconVersion_keySource_Validate()
	}
	if len(input.StandardBeacons) < 1 {
		return fmt.Errorf("StandardBeaconList has a minimum length of 1 but has the length of %d.", len(input.StandardBeacons))
	}
	if input.StandardBeacons == nil {
		return fmt.Errorf("input.StandardBeacons is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_BeaconVersion_standardBeacons_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_BeaconVersion_standardBeacons_Validate()
	}
	if input.Version < 1 {
		return fmt.Errorf("VersionNumber has a minimum of 1 but has the value of %d.", input.Version)
	}
	if len(input.CompoundBeacons) < 1 {
		return fmt.Errorf("CompoundBeaconList has a minimum length of 1 but has the length of %d.", len(input.CompoundBeacons))
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_BeaconVersion_compoundBeacons_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_BeaconVersion_compoundBeacons_Validate()
	}
	if len(input.EncryptedParts) < 1 {
		return fmt.Errorf("EncryptedPartsList has a minimum length of 1 but has the length of %d.", len(input.EncryptedParts))
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_BeaconVersion_encryptedParts_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_BeaconVersion_encryptedParts_Validate()
	}
	if input.NumberOfBuckets != nil {
		if *input.NumberOfBuckets < 1 {
			return fmt.Errorf("BucketCount has a minimum of 1 but has the value of %d.", *input.NumberOfBuckets)
		}
		if *input.NumberOfBuckets > 255 {
			return fmt.Errorf("BucketCount has a maximum of 255 but has the value of %d.", *input.NumberOfBuckets)
		}
	}
	if len(input.SignedParts) < 1 {
		return fmt.Errorf("SignedPartsList has a minimum length of 1 but has the length of %d.", len(input.SignedParts))
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_BeaconVersion_signedParts_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_BeaconVersion_signedParts_Validate()
	}
	if len(input.VirtualFields) < 1 {
		return fmt.Errorf("VirtualFieldList has a minimum length of 1 but has the length of %d.", len(input.VirtualFields))
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_BeaconVersion_virtualFields_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_BeaconVersion_virtualFields_Validate()
	}

	return nil
}

func (input BeaconVersion) Aws_cryptography_dbEncryptionSdk_dynamoDb_BeaconVersion_keySource_Validate() error {
	if input.KeySource == nil {
		return nil
	}
	switch unionType := input.KeySource.(type) {
	case *BeaconKeySourceMembersingle:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *BeaconKeySourceMembermulti:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input BeaconVersion) Aws_cryptography_dbEncryptionSdk_dynamoDb_BeaconVersion_standardBeacons_Validate() error {
	for _, item := range input.StandardBeacons {
		if item.Validate() != nil {
			return item.Validate()
		}
	}

	return nil
}
func (input BeaconVersion) Aws_cryptography_dbEncryptionSdk_dynamoDb_BeaconVersion_compoundBeacons_Validate() error {
	for _, item := range input.CompoundBeacons {
		if item.Validate() != nil {
			return item.Validate()
		}
	}

	return nil
}
func (input BeaconVersion) Aws_cryptography_dbEncryptionSdk_dynamoDb_BeaconVersion_encryptedParts_Validate() error {
	for _, item := range input.EncryptedParts {
		if item.Validate() != nil {
			return item.Validate()
		}
	}

	return nil
}
func (input BeaconVersion) Aws_cryptography_dbEncryptionSdk_dynamoDb_BeaconVersion_signedParts_Validate() error {
	for _, item := range input.SignedParts {
		if item.Validate() != nil {
			return item.Validate()
		}
	}

	return nil
}
func (input BeaconVersion) Aws_cryptography_dbEncryptionSdk_dynamoDb_BeaconVersion_virtualFields_Validate() error {
	for _, item := range input.VirtualFields {
		if item.Validate() != nil {
			return item.Validate()
		}
	}

	return nil
}

type GetBucketNumberOutput struct {
	BucketNumber int32
}

func (input GetBucketNumberOutput) Validate() error {
	if input.BucketNumber < 0 {
		return fmt.Errorf("BucketNumber has a minimum of 0 but has the value of %d.", input.BucketNumber)
	}
	if input.BucketNumber > 254 {
		return fmt.Errorf("BucketNumber has a maximum of 254 but has the value of %d.", input.BucketNumber)
	}

	return nil
}

type BucketSelectorReference struct {
}

func (input BucketSelectorReference) Validate() error {

	return nil
}

type DynamoDbEncryptionConfig struct {
}

func (input DynamoDbEncryptionConfig) Validate() error {

	return nil
}

type GetBranchKeyIdFromDdbKeyOutput struct {
	BranchKeyId string
}

func (input GetBranchKeyIdFromDdbKeyOutput) Validate() error {

	return nil
}

type LegacyDynamoDbEncryptorReference struct {
}

func (input LegacyDynamoDbEncryptorReference) Validate() error {

	return nil
}

type LegacyOverride struct {
	AttributeActionsOnEncrypt map[string]awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.CryptoAction

	Encryptor ILegacyDynamoDbEncryptor

	Policy LegacyPolicy

	DefaultAttributeFlag *awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.CryptoAction
}

func (input LegacyOverride) Validate() error {
	if input.AttributeActionsOnEncrypt == nil {
		return fmt.Errorf("input.AttributeActionsOnEncrypt is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_LegacyOverride_attributeActionsOnEncrypt_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_LegacyOverride_attributeActionsOnEncrypt_Validate()
	}

	return nil
}

func (input LegacyOverride) Aws_cryptography_dbEncryptionSdk_dynamoDb_LegacyOverride_attributeActionsOnEncrypt_Validate() error {
	for key, _ := range input.AttributeActionsOnEncrypt {
		if len(key) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(key))
		}
		if len(key) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(key))
		}
	}

	return nil
}

type SearchConfig struct {
	Versions []BeaconVersion

	WriteVersion int32
}

func (input SearchConfig) Validate() error {
	if len(input.Versions) < 1 {
		return fmt.Errorf("BeaconVersionList has a minimum length of 1 but has the length of %d.", len(input.Versions))
	}
	if len(input.Versions) > 1 {
		return fmt.Errorf("BeaconVersionList has a maximum length of 1 but has the length of %d.", len(input.Versions))
	}
	if input.Versions == nil {
		return fmt.Errorf("input.Versions is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_SearchConfig_versions_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_SearchConfig_versions_Validate()
	}
	if input.WriteVersion < 1 {
		return fmt.Errorf("VersionNumber has a minimum of 1 but has the value of %d.", input.WriteVersion)
	}

	return nil
}

func (input SearchConfig) Aws_cryptography_dbEncryptionSdk_dynamoDb_SearchConfig_versions_Validate() error {
	for _, item := range input.Versions {
		if item.Validate() != nil {
			return item.Validate()
		}
	}

	return nil
}

type DynamoDbTableEncryptionConfig struct {
	AttributeActionsOnEncrypt map[string]awscryptographydbencryptionsdkstructuredencryptionsmithygeneratedtypes.CryptoAction

	LogicalTableName string

	PartitionKeyName string

	AlgorithmSuiteId *awscryptographymaterialproviderssmithygeneratedtypes.DBEAlgorithmSuiteId

	AllowedUnsignedAttributePrefix *string

	AllowedUnsignedAttributes []string

	BucketSelector IBucketSelector

	Cmm awscryptographymaterialproviderssmithygeneratedtypes.ICryptographicMaterialsManager

	Keyring awscryptographymaterialproviderssmithygeneratedtypes.IKeyring

	LegacyOverride *LegacyOverride

	PlaintextOverride *PlaintextOverride

	Search *SearchConfig

	SortKeyName *string
}

func (input DynamoDbTableEncryptionConfig) Validate() error {
	if input.AttributeActionsOnEncrypt == nil {
		return fmt.Errorf("input.AttributeActionsOnEncrypt is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_DynamoDbTableEncryptionConfig_attributeActionsOnEncrypt_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_DynamoDbTableEncryptionConfig_attributeActionsOnEncrypt_Validate()
	}
	if len(input.PartitionKeyName) < 1 {
		return fmt.Errorf("KeySchemaAttributeName has a minimum length of 1 but has the length of %d.", len(input.PartitionKeyName))
	}
	if len(input.PartitionKeyName) > 255 {
		return fmt.Errorf("KeySchemaAttributeName has a maximum length of 255 but has the length of %d.", len(input.PartitionKeyName))
	}
	if len(input.AllowedUnsignedAttributes) < 1 {
		return fmt.Errorf("AttributeNameList has a minimum length of 1 but has the length of %d.", len(input.AllowedUnsignedAttributes))
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_DynamoDbTableEncryptionConfig_allowedUnsignedAttributes_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_DynamoDbTableEncryptionConfig_allowedUnsignedAttributes_Validate()
	}
	if input.LegacyOverride != nil {
		if input.LegacyOverride.Validate() != nil {
			return input.LegacyOverride.Validate()
		}

	}
	if input.Search != nil {
		if input.Search.Validate() != nil {
			return input.Search.Validate()
		}

	}
	if input.SortKeyName != nil {
		if len(*input.SortKeyName) < 1 {
			return fmt.Errorf("KeySchemaAttributeName has a minimum length of 1 but has the length of %d.", len(*input.SortKeyName))
		}
		if len(*input.SortKeyName) > 255 {
			return fmt.Errorf("KeySchemaAttributeName has a maximum length of 255 but has the length of %d.", len(*input.SortKeyName))
		}
	}

	return nil
}

func (input DynamoDbTableEncryptionConfig) Aws_cryptography_dbEncryptionSdk_dynamoDb_DynamoDbTableEncryptionConfig_attributeActionsOnEncrypt_Validate() error {
	for key, _ := range input.AttributeActionsOnEncrypt {
		if len(key) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(key))
		}
		if len(key) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(key))
		}
	}

	return nil
}
func (input DynamoDbTableEncryptionConfig) Aws_cryptography_dbEncryptionSdk_dynamoDb_DynamoDbTableEncryptionConfig_allowedUnsignedAttributes_Validate() error {
	for _, item := range input.AllowedUnsignedAttributes {
		if len(item) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(item))
		}
		if len(item) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(item))
		}
	}

	return nil
}

type DynamoDbTablesEncryptionConfig struct {
	TableEncryptionConfigs map[string]DynamoDbTableEncryptionConfig
}

func (input DynamoDbTablesEncryptionConfig) Validate() error {
	if input.TableEncryptionConfigs == nil {
		return fmt.Errorf("input.TableEncryptionConfigs is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_DynamoDbTablesEncryptionConfig_tableEncryptionConfigs_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_DynamoDbTablesEncryptionConfig_tableEncryptionConfigs_Validate()
	}

	return nil
}

func (input DynamoDbTablesEncryptionConfig) Aws_cryptography_dbEncryptionSdk_dynamoDb_DynamoDbTablesEncryptionConfig_tableEncryptionConfigs_Validate() error {
	for key, value := range input.TableEncryptionConfigs {
		if len(key) < 3 {
			return fmt.Errorf("TableName has a minimum length of 3 but has the length of %d.", len(key))
		}
		if len(key) > 255 {
			return fmt.Errorf("TableName has a maximum length of 255 but has the length of %d.", len(key))
		}
		if value.Validate() != nil {
			return value.Validate()
		}
	}

	return nil
}

type GetBranchKeyIdFromDdbKeyInput struct {
	DdbKey map[string]dynamodbtypes.AttributeValue
}

func (input GetBranchKeyIdFromDdbKeyInput) Validate() error {
	if input.DdbKey == nil {
		return fmt.Errorf("input.DdbKey is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_GetBranchKeyIdFromDdbKeyInput_ddbKey_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_GetBranchKeyIdFromDdbKeyInput_ddbKey_Validate()
	}

	return nil
}

func (input GetBranchKeyIdFromDdbKeyInput) Com_amazonaws_dynamodb_Key_value_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
	case *dynamodbtypes.AttributeValueMemberL:
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input GetBranchKeyIdFromDdbKeyInput) Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
		if input.Com_amazonaws_dynamodb_AttributeValue_M_Validate(unionType.Value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeValue_M_Validate(unionType.Value)
		}
	case *dynamodbtypes.AttributeValueMemberL:
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input GetBranchKeyIdFromDdbKeyInput) Com_amazonaws_dynamodb_AttributeValue_M_Validate(Value map[string]dynamodbtypes.AttributeValue) error {
	for key, value := range Value {
		if len(key) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(key))
		}
		if len(key) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(key))
		}
		if input.Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(value) != nil {
			return input.Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(value)
		}
	}

	return nil
}
func (input GetBranchKeyIdFromDdbKeyInput) Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
	case *dynamodbtypes.AttributeValueMemberL:
		if input.Com_amazonaws_dynamodb_AttributeValue_L_Validate(unionType.Value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeValue_L_Validate(unionType.Value)
		}
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input GetBranchKeyIdFromDdbKeyInput) Com_amazonaws_dynamodb_AttributeValue_L_Validate(Value []dynamodbtypes.AttributeValue) error {
	for _, item := range Value {
		if input.Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(item) != nil {
			return input.Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(item)
		}
	}

	return nil
}
func (input GetBranchKeyIdFromDdbKeyInput) Aws_cryptography_dbEncryptionSdk_dynamoDb_GetBranchKeyIdFromDdbKeyInput_ddbKey_Validate() error {
	for key, value := range input.DdbKey {
		if len(key) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(key))
		}
		if len(key) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(key))
		}
		if input.Com_amazonaws_dynamodb_Key_value_Validate(value) != nil {
			return input.Com_amazonaws_dynamodb_Key_value_Validate(value)
		}
	}

	return nil
}

type GetBucketNumberInput struct {
	Item map[string]dynamodbtypes.AttributeValue

	NumberOfBuckets int32
}

func (input GetBucketNumberInput) Validate() error {
	if input.Item == nil {
		return fmt.Errorf("input.Item is required but has a nil value.")
	}
	if input.Aws_cryptography_dbEncryptionSdk_dynamoDb_GetBucketNumberInput_item_Validate() != nil {
		return input.Aws_cryptography_dbEncryptionSdk_dynamoDb_GetBucketNumberInput_item_Validate()
	}
	if input.NumberOfBuckets < 1 {
		return fmt.Errorf("BucketCount has a minimum of 1 but has the value of %d.", input.NumberOfBuckets)
	}
	if input.NumberOfBuckets > 255 {
		return fmt.Errorf("BucketCount has a maximum of 255 but has the value of %d.", input.NumberOfBuckets)
	}

	return nil
}

func (input GetBucketNumberInput) Com_amazonaws_dynamodb_AttributeMap_value_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
	case *dynamodbtypes.AttributeValueMemberL:
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input GetBucketNumberInput) Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
		if input.Com_amazonaws_dynamodb_AttributeValue_M_Validate(unionType.Value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeValue_M_Validate(unionType.Value)
		}
	case *dynamodbtypes.AttributeValueMemberL:
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input GetBucketNumberInput) Com_amazonaws_dynamodb_AttributeValue_M_Validate(Value map[string]dynamodbtypes.AttributeValue) error {
	for key, value := range Value {
		if len(key) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(key))
		}
		if len(key) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(key))
		}
		if input.Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(value) != nil {
			return input.Com_amazonaws_dynamodb_MapAttributeValue_value_Validate(value)
		}
	}

	return nil
}
func (input GetBucketNumberInput) Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(Value dynamodbtypes.AttributeValue) error {
	if Value == nil {
		return nil
	}
	switch unionType := Value.(type) {
	case *dynamodbtypes.AttributeValueMemberS:
	case *dynamodbtypes.AttributeValueMemberN:
	case *dynamodbtypes.AttributeValueMemberB:
	case *dynamodbtypes.AttributeValueMemberSS:
	case *dynamodbtypes.AttributeValueMemberNS:
	case *dynamodbtypes.AttributeValueMemberBS:
	case *dynamodbtypes.AttributeValueMemberM:
	case *dynamodbtypes.AttributeValueMemberL:
		if input.Com_amazonaws_dynamodb_AttributeValue_L_Validate(unionType.Value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeValue_L_Validate(unionType.Value)
		}
	case *dynamodbtypes.AttributeValueMemberNULL:
	case *dynamodbtypes.AttributeValueMemberBOOL:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input GetBucketNumberInput) Com_amazonaws_dynamodb_AttributeValue_L_Validate(Value []dynamodbtypes.AttributeValue) error {
	for _, item := range Value {
		if input.Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(item) != nil {
			return input.Com_amazonaws_dynamodb_ListAttributeValue_member_Validate(item)
		}
	}

	return nil
}
func (input GetBucketNumberInput) Aws_cryptography_dbEncryptionSdk_dynamoDb_GetBucketNumberInput_item_Validate() error {
	for key, value := range input.Item {
		if len(key) < 0 {
			return fmt.Errorf("AttributeName has a minimum length of 0 but has the length of %d.", len(key))
		}
		if len(key) > 65535 {
			return fmt.Errorf("AttributeName has a maximum length of 65535 but has the length of %d.", len(key))
		}
		if input.Com_amazonaws_dynamodb_AttributeMap_value_Validate(value) != nil {
			return input.Com_amazonaws_dynamodb_AttributeMap_value_Validate(value)
		}
	}

	return nil
}

// BeaconKeySourceMembermulti
// BeaconKeySourceMembersingle
type BeaconKeySource interface {
	isBeaconKeySource()
}

type BeaconKeySourceMembermulti struct {
	Value MultiKeyStore
}

func (*BeaconKeySourceMembermulti) isBeaconKeySource() {}

type BeaconKeySourceMembersingle struct {
	Value SingleKeyStore
}

func (*BeaconKeySourceMembersingle) isBeaconKeySource() {}

// BeaconStyleMemberasSet
// BeaconStyleMemberpartOnly
// BeaconStyleMembershared
// BeaconStyleMembersharedSet
type BeaconStyle interface {
	isBeaconStyle()
}

type BeaconStyleMemberasSet struct {
	Value AsSet
}

func (*BeaconStyleMemberasSet) isBeaconStyle() {}

type BeaconStyleMemberpartOnly struct {
	Value PartOnly
}

func (*BeaconStyleMemberpartOnly) isBeaconStyle() {}

type BeaconStyleMembershared struct {
	Value Shared
}

func (*BeaconStyleMembershared) isBeaconStyle() {}

type BeaconStyleMembersharedSet struct {
	Value SharedSet
}

func (*BeaconStyleMembersharedSet) isBeaconStyle() {}

// GetEncryptedDataKeyDescriptionUnionMemberheader
// GetEncryptedDataKeyDescriptionUnionMemberitem
type GetEncryptedDataKeyDescriptionUnion interface {
	isGetEncryptedDataKeyDescriptionUnion()
}

type GetEncryptedDataKeyDescriptionUnionMemberheader struct {
	Value []byte
}

func (*GetEncryptedDataKeyDescriptionUnionMemberheader) isGetEncryptedDataKeyDescriptionUnion() {}

type GetEncryptedDataKeyDescriptionUnionMemberitem struct {
	Value map[string]dynamodbtypes.AttributeValue
}

func (*GetEncryptedDataKeyDescriptionUnionMemberitem) isGetEncryptedDataKeyDescriptionUnion() {}

// VirtualTransformMemberinsert
// VirtualTransformMemberlower
// VirtualTransformMemberprefix
// VirtualTransformMembersegment
// VirtualTransformMembersegments
// VirtualTransformMembersubstring
// VirtualTransformMembersuffix
// VirtualTransformMemberupper
type VirtualTransform interface {
	isVirtualTransform()
}

type VirtualTransformMemberinsert struct {
	Value Insert
}

func (*VirtualTransformMemberinsert) isVirtualTransform() {}

type VirtualTransformMemberlower struct {
	Value Lower
}

func (*VirtualTransformMemberlower) isVirtualTransform() {}

type VirtualTransformMemberprefix struct {
	Value GetPrefix
}

func (*VirtualTransformMemberprefix) isVirtualTransform() {}

type VirtualTransformMembersegment struct {
	Value GetSegment
}

func (*VirtualTransformMembersegment) isVirtualTransform() {}

type VirtualTransformMembersegments struct {
	Value GetSegments
}

func (*VirtualTransformMembersegments) isVirtualTransform() {}

type VirtualTransformMembersubstring struct {
	Value GetSubstring
}

func (*VirtualTransformMembersubstring) isVirtualTransform() {}

type VirtualTransformMembersuffix struct {
	Value GetSuffix
}

func (*VirtualTransformMembersuffix) isVirtualTransform() {}

type VirtualTransformMemberupper struct {
	Value Upper
}

func (*VirtualTransformMemberupper) isVirtualTransform() {}

type DynamoDbEncryptionBaseException interface {
	// This is a dummy method to allow type assertion since Go empty interfaces
	// aren't useful for type assertion checks. No concrete class is expected to implement
	// this method. This is also not exported.
	interfaceBindingMethod()
}

type IBucketSelector interface {
	GetBucketNumber(GetBucketNumberInput) (*GetBucketNumberOutput, error)
}

type IDynamoDbKeyBranchKeyIdSupplier interface {
	GetBranchKeyIdFromDdbKey(GetBranchKeyIdFromDdbKeyInput) (*GetBranchKeyIdFromDdbKeyOutput, error)
}

type ILegacyDynamoDbEncryptor interface {
}
